////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEditor.Scripting
{

	/// <summary>
	/// Game scrips building service. Compiles user C# scripts into binary assemblies.
	/// </summary>
	public static partial class ScriptsBuilder
	{
		/// <summary>
		/// Gets amount of source code compile actions since Editor startup.
		/// </summary>
		[UnmanagedCall]
		public static int CompilationsCount
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetCompilationsCount(); }
#endif
		}

		/// <summary>
		/// Gets the solution file path.
		/// </summary>
		[UnmanagedCall]
		public static string SolutionPath
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetSolutionPath(); }
#endif
		}

		/// <summary>
		/// Returns true if source code has been edited since last compilation.
		/// </summary>
		[UnmanagedCall]
		public static bool IsSourceDirty
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_IsSourceDirty(); }
#endif
		}

		/// <summary>
		/// Returns true if source code has been compilled and assembies are ready to load.
		/// </summary>
		[UnmanagedCall]
		public static bool IsReady
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_IsReady(); }
#endif
		}

		/// <summary>
		/// Checks if last scripting building failed due to errors.
		/// </summary>
		[UnmanagedCall]
		public static bool LastCompilationFailed
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_LastCompilationFailed(); }
#endif
		}

		/// <summary>
		/// Indicates that scripting directory has been modified so scripts need to be rebuilded.
		/// </summary>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public static void MarkWorkspaceDirty() 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_MarkWorkspaceDirty();
#endif
		}

		/// <summary>
		/// Requests project source code compilation.
		/// </summary>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public static void Compile() 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_Compile();
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetCompilationsCount();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern string Internal_GetSolutionPath();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern bool Internal_IsSourceDirty();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern bool Internal_IsReady();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern bool Internal_LastCompilationFailed();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_MarkWorkspaceDirty();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_Compile();
#endif
#endregion
	}
}

