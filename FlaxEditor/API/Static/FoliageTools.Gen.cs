// Copyright (c) 2012-2018 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Runtime.CompilerServices;
using FlaxEngine;
using Object = FlaxEngine.Object;

namespace FlaxEditor
{
    /// <summary>
    /// Foliage tools for editor. Allows to spawn and modify foliage instances.
    /// </summary>
    public static partial class FoliageTools
    {
        /// <summary>
        /// Gets the amount of foliage instance types defined for the given foliage actor.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <returns>The foliage types count.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static int GetFoliageTypesCount(Foliage foliage)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_GetFoliageTypesCount(Object.GetUnmanagedPtr(foliage));
#endif
        }

        /// <summary>
        /// Gets the model assigned to the foliage instance type.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <returns>The model.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static Model GetFoliageTypeModel(Foliage foliage, int index)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_GetFoliageTypeModel(Object.GetUnmanagedPtr(foliage), index);
#endif
        }

        /// <summary>
        /// Sets the model assigned to the foliage instance type.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void SetFoliageTypeModel(Foliage foliage, int index, Model model)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_SetFoliageTypeModel(Object.GetUnmanagedPtr(foliage), index, Object.GetUnmanagedPtr(model));
#endif
        }

        /// <summary>
        /// Adds the new foliage instance type.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void AddFoliageType(Foliage foliage, Model model)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_AddFoliageType(Object.GetUnmanagedPtr(foliage), Object.GetUnmanagedPtr(model));
#endif
        }

        /// <summary>
        /// Removes the foliage instance type and all foliage instances using this type.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void RemoveFoliageType(Foliage foliage, int index)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_RemoveFoliageType(Object.GetUnmanagedPtr(foliage), index);
#endif
        }

        /// <summary>
        /// Gets the foliage instance type materials buffer (overrides).
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <param name="value">The array of materials to fill. It must be valid and have size of foliage type model material slots size. When this method returns it contains a set of materials used by the foliage type.</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void GetFoliageTypeMaterials(Foliage foliage, int index, MaterialBase[] value)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_GetFoliageTypeMaterials(Object.GetUnmanagedPtr(foliage), index, value);
#endif
        }

        /// <summary>
        /// Sets the foliage instance type materials buffer (overrides).
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <param name="value">The array of materials to set (raw pointers to unmanaged instances). It must be valid and have size of foliage type model material slots size.</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void SetFoliageTypeMaterials(Foliage foliage, int index, IntPtr[] value)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_SetFoliageTypeMaterials(Object.GetUnmanagedPtr(foliage), index, value);
#endif
        }

        /// <summary>
        /// Gets the foliage instance type options.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <param name="value">The result options container.</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void GetFoliageTypeOptions(Foliage foliage, int index, out InstanceTypeOptions value)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_GetFoliageTypeOptions(Object.GetUnmanagedPtr(foliage), index, out value);
#endif
        }

        /// <summary>
        /// Sets the foliage instance type options.
        /// </summary>
        /// <param name="foliage">The foliage actor.</param>
        /// <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        /// <param name="value">The options to set.</param>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static void SetFoliageTypeOptions(Foliage foliage, int index, ref InstanceTypeOptions value)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_SetFoliageTypeOptions(Object.GetUnmanagedPtr(foliage), index, ref value);
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern int Internal_GetFoliageTypesCount(IntPtr foliage);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern Model Internal_GetFoliageTypeModel(IntPtr foliage, int index);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetFoliageTypeModel(IntPtr foliage, int index, IntPtr model);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_AddFoliageType(IntPtr foliage, IntPtr model);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_RemoveFoliageType(IntPtr foliage, int index);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetFoliageTypeMaterials(IntPtr foliage, int index, MaterialBase[] value);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetFoliageTypeMaterials(IntPtr foliage, int index, IntPtr[] value);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetFoliageTypeOptions(IntPtr foliage, int index, out InstanceTypeOptions value);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetFoliageTypeOptions(IntPtr foliage, int index, ref InstanceTypeOptions value);
#endif

        #endregion
    }
}
