//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{

		/// <summary>
		/// The interface to get time information from Flax.
		/// </summary>
		public static partial class Time
		{
			/// <summary>
			/// Gets time in seconds it took to complete the last frame, <see cref="TimeScale"/> dependent
			/// </summary>
			[UnmanagedCall]
			public static float DeltaTime
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetDeltaTime(); }
#endif
			}

			/// <summary>
			/// Gets real time in seconds since the game started
			/// </summary>
			[UnmanagedCall]
			public static float RealtimeSinceStartup
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetRealtimeSinceStartup(); }
#endif
			}

			/// <summary>
			/// Gets time at the beginning of this frame. This is the time in seconds since the start of the game. <see cref="TimeScale"/> dependent
			/// </summary>
			[UnmanagedCall]
			public static float TotalTimeSinceStartup
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetTime(); }
#endif
			}

			/// <summary>
			/// Gets or sets scale at which the time is passing. This can be used for slow motion effects.
			/// </summary>
			[UnmanagedCall]
			public static float TimeScale
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetTimeScale(); }
				set { Internal_SetTimeScale(ref value); }
#endif
			}

			/// <summary>
			/// The time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.
			/// </summary>
			[UnmanagedCall]
			public static float TimeSinceLevelLoad
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetTimeSinceLevelLoad(); }
#endif
			}

			/// <summary>
			/// Gets timeScale-independent time in seconds it took to complete the last frame.
			/// </summary>
			[UnmanagedCall]
			public static float UnscaledDeltaTime
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetUnscaledDeltaTime(); }
#endif
			}

			/// <summary>
			/// Gets timeScale-independant time at the beginning of this frame. This is the time in seconds since the start of the game.
			/// </summary>
			[UnmanagedCall]
			public static float UnscaledTime
			{
#if UNIT_TEST_COMPILANT
				get; set;
#else
				get { return Internal_GetUnscaledTime(); }
#endif
			}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetDeltaTime();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetRealtimeSinceStartup();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetTime();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetTimeScale();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetTimeScale(ref float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetTimeSinceLevelLoad();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetUnscaledDeltaTime();
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetUnscaledTime();
#endif
#endregion
	}
}

