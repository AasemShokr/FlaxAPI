////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine.Rendering
{
	/// <summary>
	/// Allows to perform custom graphics commands using GPU device and rendering pipeline.
	/// </summary>
	public sealed partial class GPUContext : Object
	{
		/// <summary>
		/// Creates new <see cref="GPUContext"/> object.
		/// </summary>
		private GPUContext() : base()
		{
		}

		/// <summary>
		/// Clears texture surface with a color.
		/// </summary>
		/// <param name="rt">Target surface.</param>
		/// <param name="color">Clear color.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void Clear(RenderTarget rt, Color color) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_Clear(unmanagedPtr, Object.GetUnmanagedPtr(rt), ref color);
#endif
		}

		/// <summary>
		/// Clears depth buffer.
		/// </summary>
		/// <param name="depthBuffer">Depth buffer to clear.</param>
		/// <param name="depthValue">Clear depth value.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void ClearDepth(RenderTarget depthBuffer, float depthValue = 1.0f) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_ClearDepth(unmanagedPtr, Object.GetUnmanagedPtr(depthBuffer), depthValue);
#endif
		}

		/// <summary>
		/// Draws postFx material to the render target.
		/// </summary>
		/// <param name="material">The material to render. It must be a post fx material.</param>
		/// <param name="output">The output texture. Must be valid and created.</param>
		/// <param name="input">The input texture. It's optional.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void DrawPostFxMaterial(MaterialBase material, RenderTarget output, RenderTarget input = null) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_DrawPostFxMaterial1(unmanagedPtr, Object.GetUnmanagedPtr(material), Object.GetUnmanagedPtr(output), Object.GetUnmanagedPtr(input));
#endif
		}

		/// <summary>
		/// Draws postFx material to the render target.
		/// </summary>
		/// <param name="material">The material to render. It must be a post fx material.</param>
		/// <param name="output">The output texture. Must be valid and created.</param>
		/// <param name="input">The input texture. It's optional.</param>
		/// <param name="view">Rendering view description structure.</param>
		/// <param name="buffers">Frame rendering buffers. Can be used by the material to gather per pixel surface properties.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void DrawPostFxMaterial(MaterialBase material, RenderTarget output, RenderTarget input, RenderView view, RenderBuffers buffers = null) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_DrawPostFxMaterial2(unmanagedPtr, Object.GetUnmanagedPtr(material), Object.GetUnmanagedPtr(output), Object.GetUnmanagedPtr(input), ref view, Object.GetUnmanagedPtr(buffers));
#endif
		}

		/// <summary>
		/// Draws scene.
		/// </summary>
		/// <param name="task">Calling render task.</param>
		/// <param name="output">Output texture.</param>
		/// <param name="buffers">Frame rendering buffers.</param>
		/// <param name="view">Rendering view description structure.</param>
		/// <param name="flags">Custom view flags collection.</param>
		/// <param name="mode">Custom view mode option.</param>
		/// <param name="customActors">Custom set of actors to render. If set to null default scene will be rendered.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void DrawScene(RenderTask task, RenderTarget output, RenderBuffers buffers, RenderView view, ViewFlags flags, ViewMode mode, IntPtr[] customActors = null) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_DrawScene(unmanagedPtr, Object.GetUnmanagedPtr(task), Object.GetUnmanagedPtr(output), Object.GetUnmanagedPtr(buffers), ref view, flags, mode, customActors);
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_Clear(IntPtr obj, IntPtr rt, ref Color color);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_ClearDepth(IntPtr obj, IntPtr depthBuffer, float depthValue);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_DrawPostFxMaterial1(IntPtr obj, IntPtr material, IntPtr output, IntPtr input);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_DrawPostFxMaterial2(IntPtr obj, IntPtr material, IntPtr output, IntPtr input, ref RenderView view, IntPtr buffers);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_DrawScene(IntPtr obj, IntPtr task, IntPtr output, IntPtr buffers, ref RenderView view, ViewFlags flags, ViewMode mode, IntPtr[] customActors);
#endif
#endregion
	}
}

