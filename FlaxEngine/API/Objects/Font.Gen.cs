////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Represents font object that can be using durng text rendering (it uses Font Asset but with precached data for chosen font properties).
	/// </summary>
	public partial class Font : Object
	{
		/// <summary>
		/// Gets font size.
		/// </summary>
		[UnmanagedCall]
		public int Size
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetSize(unmanagedPtr); }
#endif
		}

		/// <summary>
		/// Gets characters height.
		/// </summary>
		[UnmanagedCall]
		public int Height
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetHeight(unmanagedPtr); }
#endif
		}

		/// <summary>
		/// Gets the largest vertical distance above the baseline for any character in the font.
		/// </summary>
		[UnmanagedCall]
		public int Ascender
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetAscender(unmanagedPtr); }
#endif
		}

		/// <summary>
		/// Gets the largest vertical distance below the baseline for any character in the font.
		/// </summary>
		[UnmanagedCall]
		public int Descender
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetDescender(unmanagedPtr); }
#endif
		}

		/// <summary>
		/// Gets the line gap property.
		/// </summary>
		[UnmanagedCall]
		public int LineGap
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetLineGap(unmanagedPtr); }
#endif
		}

		/// <summary>
		/// Gets the kerning amount for a pair of characters.
		/// </summary>
		/// <param name="first">The first character in the pair.</param>
		/// <param name="second">The second character in the pair.</param>
		/// <returns>The kerning amount or 0 if no kerning.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public int GetKerning(char first, char second) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_GetKerning(unmanagedPtr, first, second);
#endif
		}

		/// <summary>
		/// Creates font object of given characters size.
		/// </summary>
		/// <param name="size">Characters size.</param>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public void CacheText(int size) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			Internal_CacheText(unmanagedPtr, size);
#endif
		}

		/// <summary>
		/// Calculates hited character index at given location.
		/// </summary>
		/// <param name="text">Input text to test.</param>
		/// <param name="location">Location to test.</param>
		/// <param name="layout">Layout properties.</param>
		/// <returns>Selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public int HitTestText(string text, Vector2 location, TextLayoutOptions layout) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_HitTestText1(unmanagedPtr, text, ref location, ref layout);
#endif
		}

		/// <summary>
		/// Calculates hited character index at given location.
		/// </summary>
		/// <param name="text">Input text to test.</param>
		/// <param name="location">Location to test.</param>
		/// <returns>Selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public int HitTestText(string text, Vector2 location) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_HitTestText2(unmanagedPtr, text, ref location);
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetSize(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetHeight(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetAscender(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetDescender(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetLineGap(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetKerning(IntPtr obj, char first, char second);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_CacheText(IntPtr obj, int size);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_HitTestText1(IntPtr obj, string text, ref Vector2 location, ref TextLayoutOptions layout);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_HitTestText2(IntPtr obj, string text, ref Vector2 location);
#endif
#endregion
	}
}

