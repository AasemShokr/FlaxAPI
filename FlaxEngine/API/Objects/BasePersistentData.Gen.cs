////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Class for management of data stored in a file.
	/// </summary>
	public abstract partial class BasePersistentData : Object
	{
		/// <summary>
		/// Gets value form persistent data file.
		/// </summary>
		/// <param name="key">Key to find in persistent data file.</param>
		/// <returns>null if value was not found.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public virtual object Get(string key) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_Get(unmanagedPtr, key);
#endif
		}

		/// <summary>
		/// Gets value form persistent data file.
		/// </summary>
		/// <param name="key">Key to find in persistent data file.</param>
		/// <typeparam name="T">Data expected value type</typeparam>
		/// <returns>default(T) if value was not found.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public virtual T Get<T>(string key) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return (T)Internal_GetWithType(unmanagedPtr, key, typeof(T));
#endif
		}

		/// <summary>
		/// Gets value form persistent data file. Creates file and value if not exists.
		/// </summary>
		/// <param name="key">Key to find in persistent data file.</param>
		/// <returns>null if value was not found.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public virtual object GetOrCreate(string key) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_Get(unmanagedPtr, key);
#endif
		}

		/// <summary>
		/// Gets value form persistent data file. Creates file and value if not exists.
		/// </summary>
		/// <param name="key">Key to find in persistent data file.</param>
		/// <typeparam name="T">Data expected value type</typeparam>
		/// <returns>default(T) if value was not found.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public virtual T GetOrCreate<T>(string key) 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return (T)Internal_GetWithType(unmanagedPtr, key, typeof(T));
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern object Internal_Get(IntPtr obj, string key);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern object Internal_GetWithType(IntPtr obj, string key, Type type);
#endif
#endregion
	}
}

