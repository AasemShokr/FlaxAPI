////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2018 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Light source actor. Base class for spot, point and directional lights.
	/// </summary>
	[Serializable]
	public abstract partial class LightActor : Actor
	{
		/// <summary>
		/// Gets or sets value indicating if visual element affects the world.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(-50), EditorDisplay("General"), Tooltip("True if visual element affects the world")]
		public bool AffectsWorld
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetAffectsWorld(unmanagedPtr); }
			set { Internal_SetAffectsWorld(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets the light emission color.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(20), EditorDisplay("Light"), Tooltip("Light emission color")]
		public Color Color
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { Color resultAsRef; Internal_GetColor(unmanagedPtr, out resultAsRef); return resultAsRef; }
			set { Internal_SetColor(unmanagedPtr, ref value); }
#endif
		}

		/// <summary>
		/// Gets or sets light brightness parameter.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(30), EditorDisplay("Light"), Tooltip("Light brighness value"), Limit(0.0f, 1000.0f, 0.01f)]
		public float Brightness
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetBrightness(unmanagedPtr); }
			set { Internal_SetBrightness(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets light shadows casting distance from view.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(80), EditorDisplay("Shadow", "Distance"), Tooltip("Light shadows rendering distance"), Limit(0, 100000)]
		public float ShadowsDistance
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsDistance(unmanagedPtr); }
			set { Internal_SetShadowsDistance(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets light shadows fade off distance.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(90), EditorDisplay("Shadow", "Fade Distance"), Tooltip("Shadows fade off distance"), Limit(0.0f, 1000.0f, 0.1f)]
		public float ShadowsFadeDistance
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsFadeDistance(unmanagedPtr); }
			set { Internal_SetShadowsFadeDistance(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets the minimum roughness value used to clamp material surface roughness during shading pixel.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(40), EditorDisplay("Light"), Tooltip("Minimum roughness value used to clamp material surface roughness during shading"), Limit(0.0f, 1.0f, 0.01f)]
		public float MinimumRoughness
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetMinimumRoughness(unmanagedPtr); }
			set { Internal_SetMinimumRoughness(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets value indicating if how visual element casts shadows.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(60), EditorDisplay("Shadow", "Mode"), Tooltip("Describes how visual element casts shadows")]
		public ShadowsCastingMode ShadowsMode
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsMode(unmanagedPtr); }
			set { Internal_SetShadowsMode(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets shadows sharpness value.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(70), EditorDisplay("Shadow", "Sharpness"), Tooltip("Controls shadows sharpness value"), Limit(1.0f, 10.0f, 0.001f)]
		public float ShadowsSharpness
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsSharpness(unmanagedPtr); }
			set { Internal_SetShadowsSharpness(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets shadows strength value.
		/// </summary>
		/// <remarks>
		/// Dynamic shadows blending strength. Default is 1 for fully opaque shadows, value 0 disables shadows.
		/// </remarks>
		[UnmanagedCall]
		[EditorOrder(75), EditorDisplay("Shadow", "Strength"), Tooltip("Controls dynamic shadows blending strength. Default is 1 for fully opaque shadows, value 0 disables shadows."), Limit(0.0f, 1.0f, 0.001f)]
		public float ShadowsStrength
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsStrength(unmanagedPtr); }
			set { Internal_SetShadowsStrength(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets depth bias used for shadow map comparison..
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(95), EditorDisplay("Shadow", "Depth Bias"), Tooltip("Controls dynamic shadows depth bias value. Depth bias used for shadow map comparison."), Limit(0.0f, 10.0f, 0.0001f)]
		public float ShadowsDepthBias
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsDepthBias(unmanagedPtr); }
			set { Internal_SetShadowsDepthBias(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets factor specifying the offset to add to the calculated shadow map depth with respect to the surface normal.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(96), EditorDisplay("Shadow", "Normal Offset Scale"), Tooltip("Controls dynamic shadows normal vector offset scale. A factor specifying the offset to add to the calculated shadow map depth with respect to the surface normal."), Limit(0.0f, 100.0f, 0.1f)]
		public float ShadowsNormalOffsetScale
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetShadowsNormalOffsetScale(unmanagedPtr); }
			set { Internal_SetShadowsNormalOffsetScale(unmanagedPtr, value); }
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern bool Internal_GetAffectsWorld(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetAffectsWorld(IntPtr obj, bool val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_GetColor(IntPtr obj, out Color resultAsRef);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetColor(IntPtr obj, ref Color val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetBrightness(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetBrightness(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsDistance(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsDistance(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsFadeDistance(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsFadeDistance(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetMinimumRoughness(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetMinimumRoughness(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern ShadowsCastingMode Internal_GetShadowsMode(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsMode(IntPtr obj, ShadowsCastingMode val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsSharpness(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsSharpness(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsStrength(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsStrength(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsDepthBias(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsDepthBias(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetShadowsNormalOffsetScale(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetShadowsNormalOffsetScale(IntPtr obj, float val);
#endif
#endregion
	}
}

