////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Skybox actor renders sky using custom cube texture or material
	/// </summary>
	[Serializable]
	public sealed partial class Skybox : Actor
	{
		/// <summary>
		/// Creates new <see cref="Skybox"/> object.
		/// </summary>
		private Skybox() : base()
		{
		}

		/// <summary>
		/// Creates new instance of <see cref="Skybox"/> object.
		/// </summary>
		/// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public static Skybox New() 
		{
#if UNIT_TEST_COMPILANT
			throw new FlaxTestCompilantNotImplementedException();
#else
			return Internal_Create(typeof(Skybox)) as Skybox;
#endif
		}

		/// <summary>
		/// Gets or sets value indicating if visual element affects the world.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(-50), EditorDisplay("General"), Tooltip("True if visual element affects the world")]
		public bool AffectsWorld
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetAffectsWorld(unmanagedPtr); }
			set { Internal_SetAffectsWorld(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets skybox cube texture.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(10), EditorDisplay("Skybox"), Tooltip("Skybox cube texture")]
		public CubeTexture CubeTexture
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetCubeTexture(unmanagedPtr); }
			set { Internal_SetCubeTexture(unmanagedPtr, Object.GetUnmanagedPtr(value)); }
#endif
		}

		/// <summary>
		/// Gets or sets skybox custom material used to override default.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(20), EditorDisplay("Skybox"), Tooltip("Skybox custom material used to override default")]
		public MaterialBase CustomMatrial
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetCustomMatrial(unmanagedPtr); }
			set { Internal_SetCustomMatrial(unmanagedPtr, Object.GetUnmanagedPtr(value)); }
#endif
		}

		/// <summary>
		/// Gets or sets skybox color.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(30), EditorDisplay("Skybox"), Tooltip("Skybox color")]
		public Color Color
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { Color resultAsRef; Internal_GetColor(unmanagedPtr, out resultAsRef); return resultAsRef; }
			set { Internal_SetColor(unmanagedPtr, ref value); }
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern bool Internal_GetAffectsWorld(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetAffectsWorld(IntPtr obj, bool val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern CubeTexture Internal_GetCubeTexture(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetCubeTexture(IntPtr obj, IntPtr val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern MaterialBase Internal_GetCustomMatrial(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetCustomMatrial(IntPtr obj, IntPtr val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_GetColor(IntPtr obj, out Color resultAsRef);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetColor(IntPtr obj, ref Color val);
#endif
#endregion
	}
}

