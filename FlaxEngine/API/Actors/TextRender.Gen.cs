////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2018 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Text rendering object.
	/// </summary>
	[Serializable]
	public sealed partial class TextRender : Actor
	{
		/// <summary>
		/// Creates new <see cref="TextRender"/> object.
		/// </summary>
		private TextRender() : base()
		{
		}

		/// <summary>
		/// Creates new instance of <see cref="TextRender"/> object.
		/// </summary>
		/// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public static TextRender New() 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_Create(typeof(TextRender)) as TextRender;
#endif
		}

		/// <summary>
		/// Gets or sets text to render.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(0), EditorDisplay("Text"), Tooltip("Text to render")]
		public string Text
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetText(unmanagedPtr); }
			set { Internal_SetText(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets text color.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(10), EditorDisplay("Text"), Tooltip("Color of the text")]
		public Color Color
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { Color resultAsRef; Internal_GetColor(unmanagedPtr, out resultAsRef); return resultAsRef; }
			set { Internal_SetColor(unmanagedPtr, ref value); }
#endif
		}

		/// <summary>
		/// Gets or sets the material used for the text rendering.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(20), EditorDisplay("Text"), Tooltip("Material to use for rendering")]
		public MaterialBase Material
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetMaterial(unmanagedPtr); }
			set { Internal_SetMaterial(unmanagedPtr, Object.GetUnmanagedPtr(value)); }
#endif
		}

		/// <summary>
		/// Gets or sets the font asset used as a text characters source.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(30), EditorDisplay("Text"), Tooltip("Font to use for rendering")]
		public FontAsset Font
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetFont(unmanagedPtr); }
			set { Internal_SetFont(unmanagedPtr, Object.GetUnmanagedPtr(value)); }
#endif
		}

		/// <summary>
		/// Gets or sets the font characters size.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(40), Limit(1, 1000), EditorDisplay("Text"), Tooltip("Size of the font characters")]
		public int FontSize
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetFontSize(unmanagedPtr); }
			set { Internal_SetFontSize(unmanagedPtr, value); }
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern string Internal_GetText(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetText(IntPtr obj, string val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_GetColor(IntPtr obj, out Color resultAsRef);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetColor(IntPtr obj, ref Color val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern MaterialBase Internal_GetMaterial(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetMaterial(IntPtr obj, IntPtr val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern FontAsset Internal_GetFont(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetFont(IntPtr obj, IntPtr val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern int Internal_GetFontSize(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetFontSize(IntPtr obj, int val);
#endif
#endregion
	}
}

