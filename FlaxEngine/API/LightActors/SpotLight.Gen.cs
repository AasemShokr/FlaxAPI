////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012-2017 Flax Engine. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
	/// <summary>
	/// Spot light emmits light from the point in a given direction
	/// </summary>
	[Serializable]
	public sealed partial class SpotLight : LightActor
	{
		/// <summary>
		/// Creates new <see cref="SpotLight"/> object.
		/// </summary>
		private SpotLight() : base()
		{
		}

		/// <summary>
		/// Creates new instance of <see cref="SpotLight"/> object.
		/// </summary>
		/// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
		[Obsolete("Unit tests, don't support methods calls.")]
#endif
		[UnmanagedCall]
		public static SpotLight New() 
		{
#if UNIT_TEST_COMPILANT
			throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
			return Internal_Create(typeof(SpotLight)) as SpotLight;
#endif
		}

		/// <summary>
		/// Gets or sets light radius parameter.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(1), EditorDisplay("Light"), Tooltip("Light radius"), Limit(0, 10000, 0.1f)]
		public float Radius
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetRadius(unmanagedPtr); }
			set { Internal_SetRadius(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets light source bulb radius parameter.
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(2), EditorDisplay("Light"), Tooltip("Light bulb source radius"), Limit(0, 1000, 0.01f)]
		public float SourceRadius
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetSourceRadius(unmanagedPtr); }
			set { Internal_SetSourceRadius(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets the spot light's inner cone angle (in degrees).
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(20), EditorDisplay("Light"), Tooltip("Light inner cone angle (in degrees)"), Limit(1, 80, 0.1f)]
		public float InnerConeAngle
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetInnerConeAngle(unmanagedPtr); }
			set { Internal_SetInnerConeAngle(unmanagedPtr, value); }
#endif
		}

		/// <summary>
		/// Gets or sets the spot light's outer cone angle (in degrees).
		/// </summary>
		[UnmanagedCall]
		[EditorOrder(21), EditorDisplay("Light"), Tooltip("Light outer cone angle (in degrees)"), Limit(1, 80, 0.1f)]
		public float OuterConeAngle
		{
#if UNIT_TEST_COMPILANT
			get; set;
#else
			get { return Internal_GetOuterConeAngle(unmanagedPtr); }
			set { Internal_SetOuterConeAngle(unmanagedPtr, value); }
#endif
		}

#region Internal Calls
#if !UNIT_TEST_COMPILANT
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetRadius(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetRadius(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetSourceRadius(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetSourceRadius(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetInnerConeAngle(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetInnerConeAngle(IntPtr obj, float val);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern float Internal_GetOuterConeAngle(IntPtr obj);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_SetOuterConeAngle(IntPtr obj, float val);
#endif
#endregion
	}
}

